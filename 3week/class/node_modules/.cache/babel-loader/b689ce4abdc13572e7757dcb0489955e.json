{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\hp\\\\Desktop\\\\react-tutorial\\\\reactStudy\\\\awesome-react-student\\\\3week\\\\class\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\hp\\\\Desktop\\\\react-tutorial\\\\reactStudy\\\\awesome-react-student\\\\3week\\\\class\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\hp\\\\Desktop\\\\react-tutorial\\\\reactStudy\\\\awesome-react-student\\\\3week\\\\class\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\hp\\\\Desktop\\\\react-tutorial\\\\reactStudy\\\\awesome-react-student\\\\3week\\\\class\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\hp\\\\Desktop\\\\react-tutorial\\\\reactStudy\\\\awesome-react-student\\\\3week\\\\class\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\hp\\\\Desktop\\\\react-tutorial\\\\reactStudy\\\\awesome-react-student\\\\3week\\\\class\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\hp\\\\Desktop\\\\react-tutorial\\\\reactStudy\\\\awesome-react-student\\\\3week\\\\class\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\react-tutorial\\\\reactStudy\\\\awesome-react-student\\\\3week\\\\class\\\\src\\\\container\\\\GameView.js\";\nimport React, { Component } from 'react';\nimport './MainView.css';\nimport ConetntList from \"../component/contentList/ContentList.js\";\nimport FullContent from '../component/fullcontent/FullContent.js';\nimport axios from 'axios';\n\nvar GameView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GameView, _Component);\n\n  function GameView(props) {\n    var _this;\n\n    _classCallCheck(this, GameView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GameView).call(this, props));\n\n    _this.setContents = function (data) {\n      var list = [];\n      data.items.forEach(function (item, index) {\n        list.push({\n          id: item.id,\n          name: item.snippet.title\n        });\n      });\n      return list;\n    };\n\n    _this.handleFullContentChange = function (content) {\n      _this.setState({\n        fullContent: content\n      });\n    };\n\n    _this.fetchYoutube =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(keyword) {\n        var maxResults, token, _ref2, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                maxResults = 30;\n                token = 'AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY';\n                _context.prev = 2;\n                _context.next = 5;\n                return axios.get('https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=game&key=AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY&maxResults=21');\n\n              case 5:\n                _ref2 = _context.sent;\n                data = _ref2.data;\n                console.log(data);\n\n                _this.setState({\n                  contents: _this.setContents(data)\n                });\n\n                _context.next = 13;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      fullContent: {},\n      // 메인화면에 가장 큰 영상 플레이어 콘텐츠를 가지는 state\n      contents: [],\n      // 하단의 리스트에 들어갈 콘텐츠를 가지는 state\n      keyword: '게임'\n    };\n    return _this;\n  } // 서버로 부터 받은 데이터를 내가 원하는 형태로 변경 하는 함수\n  // {id: , name: } 형식으로 모든 데이터들을 변환\n\n\n  _createClass(GameView, [{\n    key: \"componentDidMount\",\n    //컴포넌트 렌더링이 완료된 후 유튜브에서 데이터 불러옴\n    value: function componentDidMount() {\n      this.fetchYoutube();\n    } //메인화면에서 영상을 실행하는 플레이어를 제어하는 함수\n    //이 함수를 이용해서 영상을 변경 한다.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"mainView\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(FullContent, {\n        content: this.state.fullContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(ConetntList, {\n        contents: this.state.contents,\n        onClick: this.handleFullContentChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GameView;\n}(Component);\n\nexport default GameView;","map":{"version":3,"sources":["C:\\Users\\hp\\Desktop\\react-tutorial\\reactStudy\\awesome-react-student\\3week\\class\\src\\container\\GameView.js"],"names":["React","Component","ConetntList","FullContent","axios","GameView","props","setContents","data","list","items","forEach","item","index","push","id","name","snippet","title","handleFullContentChange","content","setState","fullContent","fetchYoutube","keyword","maxResults","token","get","console","log","contents","state"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,gBAAP;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,Q;;;;;AACL,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;;AADiB,UAclBC,WAdkB,GAcJ,UAACC,IAAD,EAAU;AACvB,UAAIC,IAAI,GAAG,EAAX;AACCD,MAAAA,IAAI,CAACE,KAAL,CAAWC,OAAX,CAAmB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAChCJ,QAAAA,IAAI,CAACK,IAAL,CAAU;AAACC,UAAAA,EAAE,EAACH,IAAI,CAACG,EAAT;AAAYC,UAAAA,IAAI,EAACJ,IAAI,CAACK,OAAL,CAAaC;AAA9B,SAAV;AACH,OAFD;AAGA,aAAOT,IAAP;AACD,KApBiB;;AAAA,UA6BlBU,uBA7BkB,GA6BQ,UAACC,OAAD,EAAa;AACrC,YAAKC,QAAL,CAAc;AACZC,QAAAA,WAAW,EAACF;AADA,OAAd;AAGD,KAjCiB;;AAAA,UAoDpBG,YApDoB;AAAA;AAAA;AAAA;AAAA;AAAA,+BAoDL,iBAAMC,OAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPC,gBAAAA,UADO,GACM,EADN;AAEPC,gBAAAA,KAFO,GAEC,yCAFD;AAAA;AAAA;AAAA,uBAKctB,KAAK,CAACuB,GAAN,CAAU,gIAAV,CALd;;AAAA;AAAA;AAKAnB,gBAAAA,IALA,SAKAA,IALA;AAMPoB,gBAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAZ;;AACA,sBAAKa,QAAL,CAAc;AAACS,kBAAAA,QAAQ,EAAG,MAAKvB,WAAL,CAAiBC,IAAjB;AAAZ,iBAAd;;AAPO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OApDK;;AAAA;AAAA;AAAA;AAAA;;AAId,UAAKuB,KAAL,GAAa;AACZT,MAAAA,WAAW,EAAE,EADD;AACI;AACbQ,MAAAA,QAAQ,EAAG,EAFF;AAEM;AACfN,MAAAA,OAAO,EAAG;AAHD,KAAb;AAJc;AAUlB,G,CAEF;AACA;;;;;AASA;wCACsB;AACnB,WAAKD,YAAL;AACA,K,CAEH;AACA;;;;6BAqCW;AACP,aACG;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIC,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAE,KAAKQ,KAAL,CAAWT,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJD,EAQE,oBAAC,WAAD;AAAa,QAAA,QAAQ,EAAE,KAAKS,KAAL,CAAWD,QAAlC;AAA4C,QAAA,OAAO,EAAE,KAAKX,uBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,CADH;AAaD;;;;EAhFoBlB,S;;AAmFvB,eAAeI,QAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './MainView.css';\r\nimport ConetntList from \"../component/contentList/ContentList.js\";\r\nimport FullContent from '../component/fullcontent/FullContent.js';\r\nimport axios from 'axios';\r\n\r\nclass GameView extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\r\n\t  \r\n      this.state = {\r\n      \tfullContent: {},// 메인화면에 가장 큰 영상 플레이어 콘텐츠를 가지는 state\r\n          contents : [], // 하단의 리스트에 들어갈 콘텐츠를 가지는 state\r\n          keyword : '게임'\r\n\t  };\r\n\r\n\t}\r\n\r\n// 서버로 부터 받은 데이터를 내가 원하는 형태로 변경 하는 함수\r\n// {id: , name: } 형식으로 모든 데이터들을 변환\r\n  setContents = (data) => { \r\n   let list = []\r\n    data.items.forEach((item, index) => {\r\n        list.push({id:item.id,name:item.snippet.title})\r\n    })\r\n    return list\r\n  }\r\n\r\n//컴포넌트 렌더링이 완료된 후 유튜브에서 데이터 불러옴\r\n  componentDidMount() {\r\n  \tthis.fetchYoutube()\r\n  }\r\n\r\n//메인화면에서 영상을 실행하는 플레이어를 제어하는 함수\r\n//이 함수를 이용해서 영상을 변경 한다.\r\n  handleFullContentChange = (content) => {\r\n    this.setState({\r\n      fullContent:content\r\n    })\r\n  }\r\n\r\n//유튜브에 ajax 통신을 해서 데이터를 불러 오는 함수\r\n//   fetchYoutube = () => {\r\n//   \t//axios를 이용해서 유튜브에 영상 목록을 달라고 요청\r\n//     axios.get('https://www.googleapis.com/youtube/v3/videos?part=snippet&chart='+keyword+'&key=AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY&maxResults=21')\r\n//     .then(({data}) => {//유튜브로 부터 요청한 데이터를 전달 받으면 then으로 데이터를 받음\r\n//     \t\t\t\t\t//디스트럭쳐링을 통해서 유튜브로부터 받은 데이터중에서 data만 가져옴 \r\n\r\n// \t    const list = this.setContents(data)//받아온 데이터를 내가 원하는 형태로 가공\r\n\r\n// \t    this.setState({// 가공한 데이터로 지금 바로 실행할 데이터와, 목록에 보여줄 데이터를 state에 저장\r\n// \t        contents:list.slice(1,list.length),//slice 함수는 배열형 데이터를 첫번째인자부터 두번째인자 전까지를 반환해주는 함수 입니다.\r\n// \t        fullContent:list[0]//가져온 데이터중 첫번째 데이터를 화면에서 실행 시킵니다.\r\n// \t    })\r\n//     })\r\n//   }\r\n\r\n\r\nfetchYoutube = async keyword => {\r\n    let maxResults = 30;\r\n    let token = 'AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY'\r\n\r\n    try{\r\n        const {data} = await axios.get('https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=game&key=AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY&maxResults=21')\r\n        console.log(data)\r\n        this.setState({contents : this.setContents(data)})\r\n    }catch{\r\n\r\n    }\r\n}\r\n\r\n  render() {\r\n    return (\r\n       <div className=\"mainView\">\r\n       \t{/*\r\n\t \t\t영상을 실행 시키는 컴포넌트 \r\n       \t*/}\r\n       \t<FullContent content={this.state.fullContent}/>\r\n       \t{/*\r\n\t \t\t실행할 영상 리스트를 출력하는 컴포넌트\r\n       \t*/}\r\n        \t<ConetntList contents={this.state.contents} onClick={this.handleFullContentChange} />\r\n       </div>\r\n    \r\n    );\r\n  }\r\n}\r\n\r\nexport default GameView;\r\n"]},"metadata":{},"sourceType":"module"}