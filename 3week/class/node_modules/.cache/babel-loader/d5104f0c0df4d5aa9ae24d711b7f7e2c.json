{"ast":null,"code":"import _classCallCheck from \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/src/container/MainView.js\";\nimport React, { Component } from 'react';\nimport './MainView.css';\nimport ContentList from \"../component/contentList/ContentList.js\";\nimport FullContent from '../component/fullcontent/FullContent.js';\nimport setContents from \"../lib/youflix\";\nimport axios from 'axios';\n\nvar MainView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MainView, _Component);\n\n  function MainView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MainView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MainView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fullContent: {},\n      // 메인화면에 가장 큰 영상 플레이어 콘텐츠를 가지는 state\n      contents: [] // 하단의 리스트에 들어갈 콘텐츠를 가지는 state\n      //컴포넌트 렌더링이 완료된 후 유튜브에서 데이터 불러옴\n\n    };\n\n    _this.handleFullContentChange = function (content) {\n      _this.setState({\n        fullContent: content\n      });\n    };\n\n    _this.fetchYoutube = function () {\n      //axios를 이용해서 유튜브에 영상 목록을 달라고 요청\n      axios.get('https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&key=AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY&maxResults=21').then(function (_ref) {\n        var data = _ref.data;\n        //유튜브로 부터 요청한 데이터를 전달 받으면 then으로 데이터를 받음\n        //디스트럭쳐링을 통해서 유튜브로부터 받은 데이터중에서 data만 가져옴 \n        var list = setContents(data); //받아온 데이터를 내가 원하는 형태로 가공\n\n        _this.setState({\n          // 가공한 데이터로 지금 바로 실행할 데이터와, 목록에 보여줄 데이터를 state에 저장\n          contents: list.slice(1, list.length),\n          //slice 함수는 배열형 데이터를 첫번째인자부터 두번째인자 전까지를 반환해주는 함수 입니다.\n          fullContent: list[0] //가져온 데이터중 첫번째 데이터를 화면에서 실행 시킵니다.\n\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MainView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchYoutube();\n    } //메인화면에서 영상을 실행하는 플레이어를 제어하는 함수\n    //이 함수를 이용해서 영상을 변경 한다.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"mainView\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(FullContent, {\n        content: this.state.fullContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(ContentList, {\n        contents: this.state.contents,\n        onClick: this.handleFullContentChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MainView;\n}(Component);\n\nexport default MainView;","map":{"version":3,"sources":["/Users/easier/Coding/React_Study/awesome-react-student/3week/class/src/container/MainView.js"],"names":["React","Component","ContentList","FullContent","setContents","axios","MainView","state","fullContent","contents","handleFullContentChange","content","setState","fetchYoutube","get","then","data","list","slice","length"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,gBAAP;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,Q;;;;;;;;;;;;;;;;;UAUJC,K,GAAQ;AACNC,MAAAA,WAAW,EAAE,EADP;AACU;AAChBC,MAAAA,QAAQ,EAAG,EAFL,CAEQ;AAKlB;;AAPU,K;;UAcRC,uB,GAA0B,UAACC,OAAD,EAAa;AAErC,YAAKC,QAAL,CAAc;AACZJ,QAAAA,WAAW,EAACG;AADA,OAAd;AAGD,K;;UAGDE,Y,GAAe,YAAM;AACpB;AACCR,MAAAA,KAAK,CAACS,GAAN,CAAU,uIAAV,EACCC,IADD,CACM,gBAAY;AAAA,YAAVC,IAAU,QAAVA,IAAU;AAAC;AACd;AAEJ,YAAMC,IAAI,GAAGb,WAAW,CAACY,IAAD,CAAxB,CAHiB,CAGa;;AAE9B,cAAKJ,QAAL,CAAc;AAAC;AACXH,UAAAA,QAAQ,EAACQ,IAAI,CAACC,KAAL,CAAW,CAAX,EAAaD,IAAI,CAACE,MAAlB,CADC;AACyB;AACnCX,UAAAA,WAAW,EAACS,IAAI,CAAC,CAAD,CAFN,CAES;;AAFT,SAAd;AAIA,OAVD;AAWD,K;;;;;;;wCA3BmB;AACnB,WAAKJ,YAAL;AACA,K,CAEH;AACA;;;;6BAwBW;AACP,aACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIC,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAE,KAAKN,KAAL,CAAWC,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJD,EAQE,oBAAC,WAAD;AAAa,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,QAAlC;AAA4C,QAAA,OAAO,EAAE,KAAKC,uBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,CADF;AAYD;;;;EA5DoBT,S;;AA+DvB,eAAeK,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport './MainView.css';\nimport ContentList from \"../component/contentList/ContentList.js\";\nimport FullContent from '../component/fullcontent/FullContent.js';\nimport setContents from \"../lib/youflix\";\nimport axios from 'axios';\n\nclass MainView extends Component {\n\t// constructor(props) {\n\t//   super(props);\n\n  //     this.state = {\n  //     \tfullContent: {},// 메인화면에 가장 큰 영상 플레이어 콘텐츠를 가지는 state\n\t//   \t  contents : [] // 하단의 리스트에 들어갈 콘텐츠를 가지는 state\n\t//   };\n\n\t// }\n  state = {\n    fullContent: {},// 메인화면에 가장 큰 영상 플레이어 콘텐츠를 가지는 state\n    contents : [] // 하단의 리스트에 들어갈 콘텐츠를 가지는 state\n  }\n\n\n\n//컴포넌트 렌더링이 완료된 후 유튜브에서 데이터 불러옴\n  componentDidMount() {\n  \tthis.fetchYoutube()\n  }\n\n//메인화면에서 영상을 실행하는 플레이어를 제어하는 함수\n//이 함수를 이용해서 영상을 변경 한다.\n  handleFullContentChange = (content) => {\n\n    this.setState({\n      fullContent:content\n    })\n  }\n\n//유튜브에 ajax 통신을 해서 데이터를 불러 오는 함수\n  fetchYoutube = () => {\n  \t//axios를 이용해서 유튜브에 영상 목록을 달라고 요청\n    axios.get('https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&key=AIzaSyC-v1sIG2Wn3YnoD_7_bBS4zPDceDLKmLY&maxResults=21')\n    .then(({data}) => {//유튜브로 부터 요청한 데이터를 전달 받으면 then으로 데이터를 받음\n    \t\t\t\t\t//디스트럭쳐링을 통해서 유튜브로부터 받은 데이터중에서 data만 가져옴 \n      \n\t    const list = setContents(data)//받아온 데이터를 내가 원하는 형태로 가공\n      \n\t    this.setState({// 가공한 데이터로 지금 바로 실행할 데이터와, 목록에 보여줄 데이터를 state에 저장\n\t        contents:list.slice(1,list.length),//slice 함수는 배열형 데이터를 첫번째인자부터 두번째인자 전까지를 반환해주는 함수 입니다.\n\t        fullContent:list[0]//가져온 데이터중 첫번째 데이터를 화면에서 실행 시킵니다.\n\t    })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"mainView\">\n      \t{/*\n\t\t\t영상을 실행 시키는 컴포넌트 \n      \t*/}\n      \t<FullContent content={this.state.fullContent}/>\n      \t{/*\n\t\t\t실행할 영상 리스트를 출력하는 컴포넌트\n      \t*/}\n       \t<ContentList contents={this.state.contents} onClick={this.handleFullContentChange} />\n      </div>\n    );\n  }\n}\n\nexport default MainView;\n"]},"metadata":{},"sourceType":"module"}