{"ast":null,"code":"import _classCallCheck from \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/easier/Coding/React_Study/awesome-react-student/3week/class/src/component/contentList/ContentList.js\";\nimport React, { Component } from \"react\";\nimport \"./ContentList.css\";\nimport PropTypes from \"prop-types\";\nimport Content from \"../content/Content\"; // 콘텐츠의 리스트를 보여주는 컴포넌트\n\nvar ContentList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContentList, _Component);\n\n  function ContentList() {\n    _classCallCheck(this, ContentList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ContentList).apply(this, arguments));\n  }\n\n  _createClass(ContentList, [{\n    key: \"listRender\",\n    // 한줄에 4개의 콘텐츠를 출력 하기 위해서 컴포넌트를 구성해주는 함수\n    value: function listRender() {\n      var _this$props = this.props,\n          contents = _this$props.contents,\n          onClick = _this$props.onClick;\n      var count = Math.ceil(contents.length / 4); // 현재 콘텐츠를 한줄에 4개씩 보여주면 몇줄이 나오는지를 구함\n\n      var component = []; // 컴포넌트를 담을 배열 선언\n\n      for (var i = 0; i < count; i++) {\n        // 반복문을 이용해서 한줄씩 컴포넌트를 만들어줌\n        var dataPerRow = contents.slice(i * 4, i * 4 + 4); // slice를 이용해서 그 줄에 들어가야 하는 데이터를 반환받음\n        // 현재줄*4번째 부터 현재줄*4+4 하면 0번째 줄일때는 0부터 3까지\n        // 1번째 줄일때는 4부터 7까지의 데이터를 불러온다.\n        // 위에서 선언한 배열에 한줄을 구성하는 컴포넌트를 push한다.\n        // push는 배열의 맨뒤에 데이터를 넣을때 사용 하는 함수이다.\n        // 이런 식으로 컴포넌트를 추가 가능한 이유는 첫번째 시간에 말했던것 처럼 jsx는 결국 js를 좀더 편리하게 보여주는 역할일뿐\n        // 결국 jsx가 읽혀질때는 xml형태의 js로 변환되기 때문이다.\n\n        component.push( // row는 부트스트랩에서 한줄을 의미 하는 class이다.\n        React.createElement(\"div\", {\n          className: \"row\",\n          key: \"\".concat(i, \"row\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, // 위에서 4개의 데이터를 뽑아서 저장해 가지고 있던 배열을 map을 이용해서 4개의 콘텐츠를 그려준다.\n        dataPerRow.map(function (item, index) {\n          return (// 반복문 안에서 jsx를 사용할때는 반드시 key를 써줘야 한다.\n            // col-md-3은 한 줄을 12등분 했을때 3칸만큼을 차지 하겠다는 의미이다.\n            React.createElement(\"div\", {\n              className: \"col-md-3\",\n              key: item.id + String(index),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32\n              },\n              __self: this\n            }, React.createElement(Content, {\n              content: item,\n              onClick: onClick,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 37\n              },\n              __self: this\n            }))\n          );\n        })));\n      }\n\n      return component;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"contentList align-items-center justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, this.listRender());\n    }\n  }]);\n\n  return ContentList;\n}(Component);\n\nContentList.propTypes = {\n  contents: PropTypes.array,\n  onClick: PropTypes.func\n};\nexport default ContentList;","map":{"version":3,"sources":["/Users/easier/Coding/React_Study/awesome-react-student/3week/class/src/component/contentList/ContentList.js"],"names":["React","Component","PropTypes","Content","ContentList","props","contents","onClick","count","Math","ceil","length","component","i","dataPerRow","slice","push","map","item","index","id","String","listRender","propTypes","array","func"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,mBAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB,C,CAEA;;IACMC,W;;;;;;;;;;;;;AACJ;iCACa;AAAA,wBACmB,KAAKC,KADxB;AAAA,UACHC,QADG,eACHA,QADG;AAAA,UACOC,OADP,eACOA,OADP;AAGX,UAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUJ,QAAQ,CAACK,MAAT,GAAkB,CAA5B,CAAd,CAHW,CAGmC;;AAC9C,UAAMC,SAAS,GAAG,EAAlB,CAJW,CAIW;;AACtB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAApB,EAA2BK,CAAC,EAA5B,EAAgC;AAC9B;AACA,YAAMC,UAAU,GAAGR,QAAQ,CAACS,KAAT,CAAeF,CAAC,GAAG,CAAnB,EAAsBA,CAAC,GAAG,CAAJ,GAAQ,CAA9B,CAAnB,CAF8B,CAG9B;AACA;AACA;AAEA;AACA;AACA;AACA;;AACAD,QAAAA,SAAS,CAACI,IAAV,EACE;AACA;AAAK,UAAA,SAAS,EAAC,KAAf;AAAqB,UAAA,GAAG,YAAKH,CAAL,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG;AACDC,QAAAA,UAAU,CAACG,GAAX,CAAe,UAACC,IAAD,EAAOC,KAAP;AAAA,iBACb;AACA;AACA;AAAK,cAAA,SAAS,EAAC,UAAf;AAA0B,cAAA,GAAG,EAAED,IAAI,CAACE,EAAL,GAAUC,MAAM,CAACF,KAAD,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAKE,oBAAC,OAAD;AAAS,cAAA,OAAO,EAAED,IAAlB;AAAwB,cAAA,OAAO,EAAEX,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAHa;AAAA,SAAf,CAFF,CAFF;AAiBD;;AAED,aAAOK,SAAP;AACD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,uDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,KAAKU,UAAL,EAJH,CADF;AAQD;;;;EAjDuBrB,S;;AAoD1BG,WAAW,CAACmB,SAAZ,GAAwB;AACtBjB,EAAAA,QAAQ,EAAEJ,SAAS,CAACsB,KADE;AAEtBjB,EAAAA,OAAO,EAAEL,SAAS,CAACuB;AAFG,CAAxB;AAKA,eAAerB,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./ContentList.css\";\nimport PropTypes from \"prop-types\";\nimport Content from \"../content/Content\";\n\n// 콘텐츠의 리스트를 보여주는 컴포넌트\nclass ContentList extends Component {\n  // 한줄에 4개의 콘텐츠를 출력 하기 위해서 컴포넌트를 구성해주는 함수\n  listRender() {\n    const { contents, onClick } = this.props;\n\n    const count = Math.ceil(contents.length / 4); // 현재 콘텐츠를 한줄에 4개씩 보여주면 몇줄이 나오는지를 구함\n    const component = []; // 컴포넌트를 담을 배열 선언\n    for (let i = 0; i < count; i++) {\n      // 반복문을 이용해서 한줄씩 컴포넌트를 만들어줌\n      const dataPerRow = contents.slice(i * 4, i * 4 + 4);\n      // slice를 이용해서 그 줄에 들어가야 하는 데이터를 반환받음\n      // 현재줄*4번째 부터 현재줄*4+4 하면 0번째 줄일때는 0부터 3까지\n      // 1번째 줄일때는 4부터 7까지의 데이터를 불러온다.\n\n      // 위에서 선언한 배열에 한줄을 구성하는 컴포넌트를 push한다.\n      // push는 배열의 맨뒤에 데이터를 넣을때 사용 하는 함수이다.\n      // 이런 식으로 컴포넌트를 추가 가능한 이유는 첫번째 시간에 말했던것 처럼 jsx는 결국 js를 좀더 편리하게 보여주는 역할일뿐\n      // 결국 jsx가 읽혀질때는 xml형태의 js로 변환되기 때문이다.\n      component.push(\n        // row는 부트스트랩에서 한줄을 의미 하는 class이다.\n        <div className=\"row\" key={`${i}row`}>\n          {// 위에서 4개의 데이터를 뽑아서 저장해 가지고 있던 배열을 map을 이용해서 4개의 콘텐츠를 그려준다.\n          dataPerRow.map((item, index) => (\n            // 반복문 안에서 jsx를 사용할때는 반드시 key를 써줘야 한다.\n            // col-md-3은 한 줄을 12등분 했을때 3칸만큼을 차지 하겠다는 의미이다.\n            <div className=\"col-md-3\" key={item.id + String(index)}>\n              {/*\n                      콘텐츠를 표현해주는 content component를 선언하는데 이때 onClick이벤트를 props로 넘겨준다.\n                      이 이벤트는 콘텐츠를 눌렀을때 상단의 실행되는 플레이어를 변경하는 이벤트 이다.\n                    */}\n              <Content content={item} onClick={onClick} />\n            </div>\n          ))}\n        </div>\n      );\n    }\n\n    return component;\n  }\n\n  render() {\n    return (\n      <div className=\"contentList align-items-center justify-content-center\">\n        {/*\n          리스트를 렌더링해주는 함수를 실행 시킨다.\n        */}\n        {this.listRender()}\n      </div>\n    );\n  }\n}\n\nContentList.propTypes = {\n  contents: PropTypes.array,\n  onClick: PropTypes.func\n};\n\nexport default ContentList;\n"]},"metadata":{},"sourceType":"module"}